{"version":3,"sources":["getWeb3.js","Components/whitelist.js","Components/ownerSection.js","Components/propositionBar.js","Components/proposalSection.js","Components/searchBar.js","Components/getter.js","Components/votersSection.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","Whitelist","whitelist","useState","inputAddress","setinputAddress","className","id","type","value","onChange","e","target","placeholder","onClick","event","preventDefault","OwnerSection","startProposal","endProposal","startVoting","endVoting","endContract","currentState","Fragment","style","textAlign","PropositionBar","submitProposal","inputMade","setInputMade","pattern","ProposalSection","proposalTab","tabRender","map","Tab","index","key","SearchBar","textButton","textToEnter","holder","functionToCall","inputText","setinputText","Getter","valueToSet","checkWinner","voteToSet","VotersSection","submitVote","voteVoter","winner","checkVote","App","setWeb3","accounts","setAccounts","contract","setContract","setCurrentState","setProposalTab","setVoteVoter","setWinner","useEffect","eth","getAccounts","net","getId","networkId","deployedNetwork","SystemeVote","networks","instance","Contract","abi","address","events","WorkflowStatusChange","on","returnValues","error","alert","initWeb3","add","methods","whiteListed","send","from","openingProposalSession","closingProposalSession","openingVoting","closingVoting","comptageVotes","vote","proposition","tabMinusOne","propositions","getVote","call","getWinner","margin","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe78fa96.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Accounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:7545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React, {useState} from 'react';\r\n\r\n\r\nconst Whitelist = ({whitelist}) => {\r\n\r\n\tconst [inputAddress, setinputAddress] = useState('');\r\n\r\n\tconst onSubmit = (event) => {\r\n\t\t\t\r\n\t\t\twhitelist(inputAddress);\r\n\t\t\tevent.preventDefault();\r\n\t}\r\n\r\n\treturn (\r\n\r\n\t\t<div className = \"search-bar ui segment\">\r\n\t\t\t\t<form className = \"ui form\">\r\n\t\t\t\t\t<div className = \"field\">\r\n\t\t\t\t\t\t<label>Address to whitelist</label>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tid=\"address\"\r\n\t\t\t\t\t\t\ttype = \"text\"\r\n\t\t\t\t\t\t\tvalue = {inputAddress}\r\n\t\t\t\t\t\t\tonChange = {(e) => setinputAddress(e.target.value)}\r\n\t\t\t\t\t\t\tplaceholder = \"Enter an Ethereum adress 0x...\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t<button className = \" green ui button\" onClick = {onSubmit} > Enter in Whitelist </button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Whitelist;\r\n","import React from 'react';\r\nimport Whitelist from \"./whitelist\";\r\n\r\n\r\nconst OwnerSection = ({startProposal, endProposal, startVoting, endVoting, endContract, currentState,whitelist}) => {\r\n\r\n\r\nreturn (\r\n\r\n\t<React.Fragment>\r\n\t\t<div>\r\n\t\t\t<div className = \"ui three column doubling stackable grid container\">\r\n\t\t\t\t<div className = \"row\"> \r\n                \t<Whitelist whitelist = {whitelist} />\r\n              \t</div>\r\n\t\t\t\t<div className = \"column\">\r\n\t\t\t\t\t<div style = {{textAlign:'center'}}>Proposal Session</div> \r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<button className = \"ui positive button\" onClick = {() => {startProposal()}}>Start</button>\r\n\t\t\t\t\t\t\t<button className = \"ui negative button\" onClick = {() => {endProposal()}}>Finish</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className = \"column\">\r\n\t\t\t\t\t<label style = {{textAlign:'center'}}>Voting session \r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<button className = \"ui positive button\" onClick = {() => {startVoting()}}>Start</button>\r\n\t\t\t\t\t\t\t<button className = \"ui negative button\" onClick = {() => {endVoting()}}>Finish</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className = \"column\">\r\n\t\t\t\t\t<label style = {{textAlign:'center'}}>Counting votes \r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<button className = \" blue ui button\" onClick = {() => {endContract()} }>Start</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</React.Fragment>\r\n\t);\r\n\r\n\r\n}\r\n\r\nexport default OwnerSection;","import React, {useState} from 'react';\r\n\r\nconst PropositionBar = ({submitProposal}) => {\r\n\r\n\tconst [inputMade, setInputMade] = useState('');\r\n\r\n\tconst onSubmit = (event) => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tsubmitProposal (inputMade);\r\n\t\t\t\r\n\t}\r\n\r\n\treturn (\r\n\r\n\t\t<div className = \"search-bar ui segment\">\r\n\t\t\t\t<form className = \"ui form\">\r\n\t\t\t\t\t<div className = \"field\">\r\n\t\t\t\t\t\t<label>Enter a new proposal</label>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype = \"text\"\r\n\t\t\t\t\t\t\tvalue = {inputMade}\r\n\t\t\t\t\t\t\tonChange = {(e) => setInputMade(e.target.value)}\r\n\t\t\t\t\t\t\tpattern = \"0x\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t<button className = \"green ui button\" onClick = {onSubmit} > submit </button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default PropositionBar;","import React from 'react';\r\nimport PropositionBar from \"./propositionBar\";\r\n\r\n\r\nconst ProposalSection = ({proposalTab, submitProposal}) => {\r\n\r\n\tconst tabRender = proposalTab.map( (Tab, index) => {\r\n\r\n\t\treturn(\r\n\t\t\t<tr key={Tab}>\r\n\t\t\t\t<td> {Tab} </td>\r\n\t\t\t\t<td>{index}</td>\r\n\t\t\t</tr>\r\n\t\t\t)\r\n\t\t})\r\n\r\nreturn (\r\n\t<React.Fragment>\r\n\t\t<div>\r\n\t\t\t<div>\r\n\t\t\t <PropositionBar \r\n\t\t\t submitProposal = {submitProposal}\r\n\t\t\t  />\r\n\t\t\t</div>\r\n\t\t\t\t<table className = \"ui celled table\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr><th>Proposal</th>\r\n\t\t\t\t\t\t<th>ID</th>\r\n\t\t\t\t\t</tr></thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{tabRender}\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t</div>\r\n\t\t\r\n\t</React.Fragment>\r\n\t)\r\n}\r\n\r\nexport default ProposalSection;","import React,{useState} from 'react';\r\n\r\nconst SearchBar = ({textButton,textToEnter,holder, functionToCall}) => {\r\n\r\n\tconst [inputText, setinputText] = useState('');\r\n\r\n\tconst onSubmit = (event) => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tfunctionToCall(inputText);\r\n\t}\r\n\r\n\treturn (\r\n\r\n\t\t<div className = \"search-bar ui segment\">\r\n\t\t\t<form className = \"ui form\">\r\n\t\t\t\t<div className = \"field\">\r\n\t\t\t\t\t<label>{textToEnter}</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tid=\"address\"\r\n\t\t\t\t\t\ttype = \"text\"\r\n\t\t\t\t\t\tvalue = {inputText}\r\n\t\t\t\t\t\tonChange = {(e) => setinputText(e.target.value)}\r\n\t\t\t\t\t\tplaceholder = {holder}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button className = \"green ui button\" onClick = {onSubmit}> {textButton} </button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t\t);\r\n\r\n\r\n}\r\n\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\n\r\nconst Getter = ({valueToSet, textToEnter, checkWinner,voteToSet}) => {\r\n\t\r\n\r\n\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className = \"ui labeled button\">\r\n\t\t\t\t\t<div className = \"blue ui button\" onClick = {checkWinner}>\r\n\t\t\t\t\t\t{textToEnter}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"ui basic label\">\r\n\t\t\t\t    \tWinner: {valueToSet} <br/>\r\n\t\t\t\t  \t\tVotes: {voteToSet} \r\n\t\t\t\t  \t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Getter;","import React from 'react';\r\nimport SearchBar from './searchBar';\r\nimport Getter from \"./getter\";\r\n\r\n\r\nconst VotersSection = ({currentState, submitVote, voteVoter,proposalTab,winner,checkVote, checkWinner}) => {\r\n\r\nconst textButton1 = \"Submit Vote\";\r\nconst textToEnter1 = \"Vote\";\r\nconst holder1 = \"Enter a proposal Id\"\r\nconst textButton2 = \"Check\";\r\nconst textToEnter2 = \"Check the vote\";\r\nconst holder2 = \"Enter an ethereum address 0x..\"\r\nconst textToEnter3 = \"Get winner\";\r\n\r\n\r\n\treturn (\r\n\t\t\t<div className = \"ui two column grid\">\r\n\t\t\t\t<div className = \"row\">\r\n\t\t\t\t\t<div className = \" sixteen wide column\" >\r\n\t\t\t\t\t\t<div className = \"ui visible message\">\r\n\t\t\t\t\t\t\t<p style = {{textAlign:'center'}}>{currentState}</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className = \"row\">\r\n\t\t\t\t\t<div className = \" sixteen wide column\" >\r\n\t\t\t\t\t\t<SearchBar \r\n\t\t\t\t\t\ttextButton = {textButton1} \r\n\t\t\t\t\t\ttextToEnter = {textToEnter1} \r\n\t\t\t\t\t\tholder = {holder1} \r\n\t\t\t\t\t\tfunctionToCall = {submitVote} \r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className = \"row\">\r\n\t\t\t\t\t<div className = \" eight wide column\">\r\n\t\t\t\t\t\t<SearchBar \r\n\t\t\t\t\t\ttextButton = {textButton2} \r\n\t\t\t\t\t\ttextToEnter = {textToEnter2} \r\n\t\t\t\t\t\tholder = {holder2}\r\n\t\t\t\t\t\tfunctionToCall = {checkVote}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className = \"eight wide column\">\r\n\t\t\t\t\t\t<div className = \"ui visible message\">\r\n\t\t\t\t\t\t\t<p>Vote : {proposalTab[voteVoter]}</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className = \"row\">\r\n\t\t\t\t\t<div className = \"sixteen wide column\">\r\n\t\t\t\t\t\t<Getter\r\n\t\t\t\t\t\t\tvoteToSet = {winner[1]}\r\n\t\t\t\t\t\t\tvalueToSet = {winner[0]} \r\n\t\t\t\t\t\t\ttextToEnter = {textToEnter3}\r\n\t\t\t\t\t\t\tcheckWinner = {checkWinner}\r\n\t\t\t\t\t\t />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default VotersSection;","import React, { useState, useEffect } from \"react\";\r\nimport SystemeVote from \"./contracts/SystemeVote.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\nimport OwnerSection from \"./Components/ownerSection\";\r\nimport ProposalSection from \"./Components/proposalSection\";\r\nimport VotersSection from \"./Components/votersSection\";\r\n\r\nconst App = () => {\r\n\r\n  const [web3,setWeb3]= useState(null);\r\n  const [accounts,setAccounts]=useState(null);\r\n  const [contract,setContract]=useState(null);\r\n  const [currentState,setCurrentState] = useState(\"We are in voters registration session\");\r\n  const [proposalTab,setProposalTab] = useState ([]);\r\n  const [voteVoter,setVoteVoter] = useState (null);\r\n  const [winner,setWinner] = useState ([]);\r\n\r\n  useEffect ( () => {\r\n\r\n      const initWeb3 = async () =>{\r\n  try{\r\n          const web3 = await getWeb3();\r\n          const accounts = await web3.eth.getAccounts();\r\n          const networkId = await web3.eth.net.getId();\r\n          const deployedNetwork = SystemeVote.networks[networkId];\r\n      \r\n          const instance = new web3.eth.Contract(\r\n            SystemeVote.abi,\r\n            deployedNetwork && deployedNetwork.address,\r\n            );\r\n\r\n          instance.events.WorkflowStatusChange()\r\n\t          .on(\"data\", (event) => {\r\n\t          \tswitch (event.returnValues['newStatus']){\r\n\t          \tcase \"1\" : \r\n\t\t          \tsetCurrentState(\"Proposal session\");\r\n\t\t          \tbreak;\r\n\t          \tcase \"2\" : \r\n\t\t          \tsetCurrentState(\"Proposal session over, voting session will start soon...\");\r\n\t\t          \tbreak;\r\n\t          \tcase \"3\" : \r\n\t\t          \tsetCurrentState('Voting session');\r\n\t\t          \tbreak;\r\n\t          \tcase \"4\" : \r\n\t          \t\tsetCurrentState('Voting session over, results are coming soon');\r\n\t          \t\tbreak;\r\n\t          \tcase \"5\" : \r\n\t          \t\tsetCurrentState('Finsished, Consult the winner');\r\n\t          \t\tbreak;\r\n\t          \tdefault :\r\n\t          \t\tsetCurrentState('Registration voter session');\r\n\t          }\r\n\r\n\t\t\t}).on(\"error\", console.error);\r\n\r\n\r\n          setContract(instance);\r\n          setWeb3(web3);\r\n          setAccounts(accounts);\r\n\r\n\r\n    } catch (error){\r\n        alert(\r\n            `Non-Ethereum browser detected. Can you please try to install MetaMask before starting.`,\r\n          );\r\n          console.error(error);\r\n      }\r\n    }\r\n      initWeb3();\r\n      \r\n  },[accounts]);\r\n  \r\n  const whitelist = async(add) => {\r\n      try{\r\n        const accounts = await web3.eth.getAccounts();\r\n        setAccounts(accounts);\r\n        await contract.methods.whiteListed(add).send({from: accounts[0]});\r\n        // Récupérer la liste des comptes autorisés\r\n      }catch (error){\r\n          console.log(error);\r\n          alert('Error transaction');\r\n          }\r\n    }\r\n\r\n  const startProposal = async() => {\r\n        const accounts = await web3.eth.getAccounts();\r\n        setAccounts(accounts);\r\n        await contract.methods.openingProposalSession().send({from: accounts[0]});\r\n      }\r\n\r\n  const endProposal = async() => {\r\n        const accounts = await web3.eth.getAccounts();\r\n        setAccounts(accounts);\r\n        await contract.methods.closingProposalSession().send({from: accounts[0]});\r\n      }\r\n\r\n    const startVoting = async() => {\r\n        const accounts = await web3.eth.getAccounts();\r\n        setAccounts(accounts);\r\n        await contract.methods.openingVoting().send({from: accounts[0]});\r\n      }\r\n    \r\n    const endVoting = async() => {\r\n        const accounts = await web3.eth.getAccounts();\r\n        setAccounts(accounts);\r\n        await contract.methods.closingVoting().send({from: accounts[0]});\r\n      }\r\n\r\n    const endContract = async() => {\r\n        const accounts = await web3.eth.getAccounts();\r\n        setAccounts(accounts);\r\n        await contract.methods.comptageVotes().send({from: accounts[0]});\r\n      }\r\n\r\n    const submitVote = async (vote) => {\r\n        try{\r\n          const accounts = await web3.eth.getAccounts();\r\n          setAccounts(accounts);\r\n          await contract.methods.vote(vote).send({from: accounts[0]});\r\n      }catch(error){\r\n        alert('Error transaction');\r\n      }\r\n    }\r\n\r\n    const submitProposal = async (proposition) => {\r\n      \r\n      const tabMinusOne = proposalTab;\r\n\r\n      try{\r\n        const accounts = await web3.eth.getAccounts();\r\n        setAccounts(accounts);\r\n        await contract.methods.propositions(proposition).send({from: accounts[0]});\r\n        setProposalTab((proposalTab) => {\r\n\r\n        return [...proposalTab,proposition]; //...=Tu prend le contenu de l'objet ici proposal tab, et tu l\r\n        });\r\n\r\n      }catch (error){\r\n        setProposalTab (tabMinusOne);\r\n      }\r\n    }\r\n\r\n    const checkVote = async (add) => {\r\n        try{\r\n        setVoteVoter(await contract.methods.getVote(add).call());\r\n        console.log(proposalTab);\r\n      }catch(error){\r\n        alert ('Error transaction');\r\n      }\r\n    }\r\n\r\n    const checkWinner = async () =>{\r\n      try{\r\n        setWinner(await contract.methods.getWinner().call());\r\n        console.log(winner);\r\n    }catch (error){\r\n\r\n        alert('Error transaction');\r\n      }\r\n    } \r\n\r\n  return (\r\n          <div>\r\n            <h1 style = {{textAlign:'center', margin:'50px' }} > Systeme de vote </h1>\r\n            <div className = \"ui two column grid\">\r\n              <div className = \"ui row\">\r\n                <div className = \"column\">\r\n                  <div className=\"ui raised very padded text container segment\">\r\n                    <h2 className=\"ui header\" style = {{textAlign:'center'}}>Proposal</h2>\r\n                    <ProposalSection \r\n                    proposalTab = {proposalTab} \r\n                    submitProposal={submitProposal}/>\r\n                  </div>\r\n                </div>\r\n                <div className = \"column\">\r\n                  <div className=\"ui raised very padded text container segment\">\r\n                    <h2 className=\"ui header\" style = {{textAlign:'center'}}>Administrator section</h2>\r\n                      <OwnerSection \r\n                      startProposal = {startProposal} \r\n                      endProposal = {endProposal} \r\n                      startVoting = {startVoting} \r\n                      endVoting = {endVoting} \r\n                      endContract = {endContract}\r\n                      whitelist = {whitelist}\r\n                      />\r\n                  </div>\r\n                  <div className=\"ui raised very padded text container segment\">\r\n                    <h2 className=\"ui header\" style = {{textAlign:'center'}}>Voters Section</h2>\r\n                      <VotersSection \r\n                      currentState = {currentState} \r\n                      submitVote = {submitVote}\r\n                      voteVoter = {voteVoter} \r\n                      proposalTab = {proposalTab}\r\n                      winner = {winner}\r\n                      checkVote = {checkVote}\r\n                      checkWinner = {checkWinner}\r\n                       />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}